/* 📚 Leetcode 151: Reverse Words in a String
link: https://leetcode.com/problems/reverse-words-in-a-string/
🧠 Concept Used: String Trimming + Splitting + Reverse Order Assembly
💡 Problem Statement:
Given an input string `s`, reverse the order of the words. A word is defined as a sequence of non-space characters.
The reversed string should not contain leading or trailing spaces and should have only one space between words.

Example:
Input:  s = "  the sky   is blue  "
Output: "blue is sky the"

🔍 Approach:

Step 1: Normalize the string:
- Use `s.trim()` to remove leading and trailing spaces.
- Use `s.split("\\s+")` to split the string by **one or more spaces** (handles multiple spaces between words).
  🔍 `\\s+` is a regular expression:
     - `\\s` matches any whitespace character.
     - `+` means one or more — so `"   "` or `" "` are treated as a single delimiter.

Step 2: Reverse the word order:
- Use a loop to append words from the end of the array (i.e., reverse traversal).
- Use `StringBuilder` to efficiently build the output string.

Step 3: Avoid extra trailing space:
- Add a space after each word only **if it's not the last word**.
  ✅ Done using `if (i > 0)` to skip adding space after the last word.

🎯 Logic Summary:
- Trim and split input string to get clean words.
- Loop from end to start to reverse the word order.
- Use conditionally added space to avoid trailing whitespace.

🐞 Mistakes/Corners Handled:
- ✅ `.trim()` avoids leading/trailing space in output.
- ✅ `"\\s+"` handles multiple spaces between words (e.g., `"a  b    c"` becomes `["a", "b", "c"]`).
- ✅ `if (i > 0)` prevents adding an extra space after the last word.
- ❌ Without these, you'd get outputs like: `"  blue is sky the "` or `"blue is sky the "` (with wrong spacing).

⏱️ Time Taken: Not noted

📈 Time Complexity:
- O(n), where n is the number of characters in the string.
- Trimming, splitting, and building the final result all take linear time.

🗃️ Space Complexity:
- O(n) for the word array and the `StringBuilder`.

🧪 Example Dry Run:
Input: `"  hello    world  "`
- After trim & split: `["hello", "world"]`
- Reverse and join: `"world hello"`

*/


class Solution {
    public String reverseWords(String s) {
        String [] str = s.trim().split("\\s+");
      //  System.out.println(Arrays.toString(str));
        StringBuilder strB = new StringBuilder();
        for(int i = str.length -1;i >= 0; i--){
          strB.append(str[i]);
        if(i>0){
            strB.append(" ");
        }
        }
        return strB.toString();
    }
}
